spring.application.name=scheduler-service
server.port=8081
# --- Datasource Configuration ---
spring.datasource.url=${SCHEDULER_SERVICE_DATABASE}
spring.datasource.username=${SCHEDULER_SERVICE_DATABASE_USERNAME}
spring.datasource.password=${SCHEDULER_SERVICE_DATABASE_PASSWORD}

# --- Hibernate Properties ---
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

# --- Kafka Consumer Configuration ---
# Connects to the 'kafka' container using its service name from docker-compose.yml
spring.kafka.consumer.bootstrap-servers=${KAFKA_URL}
spring.kafka.consumer.properties.security.protocol=SASL_SSL
spring.kafka.consumer.properties.sasl.mechanism=PLAIN
spring.kafka.consumer.properties.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username="${KAFKA_API}" password="${KAFKA_SECRET}";
spring.kafka.consumer.group-id=scheduler-group
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
# Use the JsonDeserializer to convert the JSON message back into your event object
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.value.default.type=com.fierceadventurer.schedulerservice.events.VariantReadyForSchedulingEvent
spring.kafka.properties.session.timeout.ms=45000


client.id=${KAFKA_CLIENTID}


clients.social-account-service.url=http://social-account-service:8080

